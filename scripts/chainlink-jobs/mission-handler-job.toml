type = "directrequest"
schemaVersion = 1
name = "MissionHandler v1"
maxTaskDuration = "0s"
contractAddress = "<contract-operator-address>"
minIncomingConfirmations = 0
observationSource = """
       decode_log   [type="ethabidecodelog"
                  abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"
                  data="$(jobRun.logData)"
                  topics="$(jobRun.logTopics)"]
    decode_cbor  [type="cborparse" data="$(decode_log.data)"]
    decode_log -> decode_cbor
    decode_cbor -> quester
    decode_cbor -> missionid
    decode_cbor -> completed
    quester          [type="http" method=GET url="$(decode_cbor.get)" allowunrestrictednetworkaccess="true"]
    quester_parse    [type="jsonparse" path="$(decode_cbor.pathQuester)" data="$(quester)"]
    quester -> quester_parse
    missionid          [type="http" method=GET url="$(decode_cbor.get)" allowunrestrictednetworkaccess="true"]
    missionid_parse    [type="jsonparse" path="$(decode_cbor.pathMissionId)" data="$(missionid)"]
    missionid -> missionid_parse
    completed          [type="http" method=GET url="$(decode_cbor.get)" allowunrestrictednetworkaccess="true"]
    completed_parse    [type="jsonparse" path="$(decode_cbor.pathCompleted)" data="$(completed)"]
    completed -> completed_parse
    quester_parse -> encode_mwr
    missionid_multiply -> encode_mwr
    completed_parse -> encode_mwr
    // MWR API does NOT auto populate the requestID.
    encode_mwr [type="ethabiencode"
                abi="(bytes32 requestId, address quester, uint256 missionId, bool completed)"
                data="{\\"requestId\\": $(decode_log.requestId), \\"quester\\": $(quester_parse), \\"missionId\\": $(missionid_parse), \\"completed\\": $(completed_parse)}"
                ]
    encode_tx  [type="ethabiencode"
                abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"
                data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\":   $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_mwr)}"
                ]
    submit_tx  [type="ethtx" to="<contract-operator-address>" data="$(encode_tx)"]
    encode_mwr -> encode_tx -> submit_tx
"""